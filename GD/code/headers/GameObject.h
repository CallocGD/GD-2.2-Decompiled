#ifndef GAMEOBJECT_H
#define GAMEOBJECT_H

#include "includes.h"
#include <array>

/* ================ GAME OBJECT ============================================ */
/* I am putting these Notes in because of it's sheer size it's important that 
 * You understand these things that I will be writing down 
 *
 * - This Object is likely over 20,000+ lines of code (update My estimation was wrong , maybe 4,000?)
 * - There's Many Unfound Portions in this object that the community 
 *   does not know about 
 *
 * - Due to the fact That I'm doing this mental suffering for all of you 
 *   to have this object I will for Now be reverse engineering the smaller 
 *   pices of this object so that Eventually the bigger chunks of code will be solved.
 *  
 * - There were many additional things added in 2.2 That make this object super bulky
 *   which might be why Nobody has ever tackled this one before until now. I've wanted to 
 *   undertake such a massive feat. To prove that the impossible is possible.
 * 
 * - Any fields that were not guessed or known about or were not listed will not be done 
 *   until later 
 * 
 * - Some Fields may require me to use other external tools and experimentation to find them
 * 
 * - Some Code may require me to ask robtop since or other people since my other friend quit.
 *   But who knows... 
 * 
 * - 254 Functions Total 
 * 
 * - Calloc 
 */

enum GameObjectType {
};

class PlayerObject;

class GJSpriteColor{
public:
    int	m_colorID;	
    int	m_defaultColorID;	
	float m_opacity;	
    cocos2d::ccHSVValue *m_hsv;	

    bool m_usesHsv;

    int getColorMode();

};


class GameObject : public CCSpritePlus {
public:
	
	/* 254 FUNCTIONS WHAT THE FUCK... */

	void addColorSprite(std::string p0);
    void addColorSpriteToParent(bool p0);
    void addColorSpriteToSelf();
    void addCustomBlackChild(std::string p0, float p1, bool p2);
   	cocos2d::CCSprite* addCustomChild(std::string pszSpriteFrameName, cocos2d::CCPoint pos, int zOrder);
    cocos2d::CCSprite* addCustomColorChild(std::string customColor);
    void addEmptyGlow();
    void addGlow(std::string p0);
    cocos2d::CCSprite* addInternalChild(cocos2d::CCSprite* sprite, std::string frameName, cocos2d::CCPoint pos, int zOrder);
    cocos2d::CCSprite* addInternalCustomColorChild(std::string p0, cocos2d::CCPoint p1, int p2);
    cocos2d::CCSprite* addInternalGlowChild(std::string p0, cocos2d::CCPoint p1);
    void addNewSlope01(bool p0);
    void addNewSlope01Glow(bool p0);
    void addNewSlope02(bool p0);
    void addNewSlope02Glow(bool p0);
    void addRotation(float p0, float p1);
    void addRotation(float p0);
    void addToColorGroup(int p0);
    void addToCustomScaleX(float p0);
    void addToCustomScaleY(float p0);
    void addToOpacityGroup(int p0);
    void addToTempOffset(double p0, double p1);
    void assignUniqueID();
    bool belongsToGroup(int groupID);
    cocos2d::CCRect calculateOrientedBox();
    bool canChangeCustomColor();
    bool canChangeMainColor();
    bool canChangeSecondaryColor();
    bool canRotateFree();
    TodoReturn colorForMode(int p0, bool p1);
    void commonInteractiveSetup();
    void commonSetup();
    TodoReturn copyGroups(GameObject* p0);
    TodoReturn createAndAddParticle(int p0, char const* p1, int p2, cocos2d::tCCPositionType p3);
    TodoReturn createColorGroupContainer(int p0);
    void createGlow(std::string p0);
    void createGroupContainer(int p0);
    void createOpacityGroupContainer(int group);
    TodoReturn createSpriteColor(int p0);
    static GameObject* createWithFrame(char const* frame);
    static GameObject* createWithKey(int p0);
    void deselectObject();
    void destroyObject();
    void determineSlopeDirection();
    bool didScaleXChange();
    bool didScaleYChange();
    TodoReturn dirtifyObjectPos();
    TodoReturn dirtifyObjectRect();
    void disableObject();
    bool dontCountTowardsLimit();
    void duplicateAttributes(GameObject* p0);
    TodoReturn duplicateColorMode(GameObject* p0);
    void duplicateValues(GameObject* p0);
    TodoReturn editorColorForCustomMode(int p0);
    TodoReturn editorColorForMode(int p0);
    void fastRotateObject(float rotation);
    TodoReturn getActiveColorForMode(int p0, bool p1);
    const char* getBallFrame(int p0);
    TodoReturn getBoundingRect();
    cocos2d::CCPoint getBoxOffset();
    TodoReturn getColorFrame(std::string p0);
    int getColorIndex();
    TodoReturn getColorKey(bool p0, bool p1);
    int getCustomZLayer();
    std::string getGlowFrame(std::string p0);
    TodoReturn getGroupDisabled();
    int getGroupID(int p0);
    std::string getGroupString();
    cocos2d::CCPoint getLastPosition();
    GJSpriteColor* getMainColor();
    int getMainColorMode();
    int getObjectDirection();
    float getObjectRadius();
    bool getObjectRectDirty();
    cocos2d::CCRect& getObjectRectPointer();
    int getObjectZLayer();
    int getObjectZOrder();
    bool getOrientedRectDirty();
    cocos2d::CCRect getOuterObjectRect();
    int getParentMode();
    GJSpriteColor* getRelativeSpriteColor(int p0);
    cocos2d::CCPoint getScalePosDelta();
    GJSpriteColor* getSecondaryColor();
    TodoReturn getSecondaryColorMode();
    TodoReturn getSlopeAngle();
    TodoReturn getStartPos();
    int getType();
    TodoReturn getUnmodifiedPosition();
    TodoReturn groupColor(cocos2d::ccColor3B const& p0, bool p1);
    float groupOpacityMod();
    void groupWasDisabled();
    void groupWasEnabled();
    bool hasSecondaryColor();
    bool ignoreEditorDuration();
    bool ignoreEnter();
    bool ignoreFade();
    bool init(char const* p0);
    bool isBasicEnterEffect(int ID);
    bool isBasicTrigger();
    bool isColorObject();
    bool isColorTrigger();
    bool isConfigurablePortal();
    bool isEditorSpawnableTrigger();
    bool isFacingDown();
    bool isFacingLeft();
    bool isSettingsObject();
    bool isSpawnableTrigger();
    bool isSpecialObject();
    bool isSpeedObject();
    bool isStoppableTrigger();
    bool isTrigger();
    void loadGroupsFromString(std::string p0);
    void makeInvisible();
    void makeVisible();
    static GameObject* objectFromVector(std::vector<std::string>& p0, std::vector<void*>& p1, GJBaseGameLayer* p2, bool p3);
    TodoReturn opacityModForMode(int p0, bool p1);
    TodoReturn parentForZLayer(int p0, bool p1, int p2);
    TodoReturn perspectiveColorFrame(char const* p0, int p1);
    TodoReturn perspectiveFrame(char const* p0, int p1);
    void playDestroyObjectAnim(GJBaseGameLayer* p0);
    TodoReturn playPickupAnimation(cocos2d::CCSprite* p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, bool p9, float p10, float p11);
    TodoReturn playPickupAnimation(cocos2d::CCSprite* p0, float p1, float p2, float p3, float p4);
    void playShineEffect();
    void quickUpdatePosition();
    void quickUpdatePosition2();
    void removeColorSprite();
    void removeGlow();
    void reorderColorSprite();
    void resetColorGroups();
    void resetGroupDisabled();
    void resetGroups();
    void resetMainColorMode();
    void resetMID();
    void resetMoveOffset();
    void resetRScaleForced();
    void resetSecondaryColorMode();
    void setAreaOpacity(float p0, float p1, int p2);
    void setCustomZLayer(int p0);
    void setDefaultMainColorMode(int p0);
    void setDefaultSecondaryColorMode(int p0);
    void setGlowOpacity(unsigned char p0);
    void setLastPosition(cocos2d::CCPoint const& p0);
    void setMainColorMode(int p0);
    void setSecondaryColorMode(int p0);
    TodoReturn setupColorSprite(int p0, bool p1);
    TodoReturn setupPixelScale();
    TodoReturn setupSpriteSize();
    TodoReturn shouldBlendColor(GJSpriteColor* p0, bool p1);
    TodoReturn shouldLockX();
    TodoReturn shouldNotHideAnimFreeze();
    TodoReturn shouldShowPickupEffects();
    TodoReturn slopeFloorTop();
    TodoReturn slopeWallLeft();
    TodoReturn slopeYPos(cocos2d::CCRect p0);
    TodoReturn slopeYPos(float p0);
    TodoReturn slopeYPos(GameObject* p0);
    TodoReturn spawnDefaultPickupParticle(GJBaseGameLayer* p0);
    TodoReturn updateBlendMode();
    TodoReturn updateCustomColorType(short p0);
    void updateCustomScaleX(float p0);
    void updateCustomScaleY(float p0);
    TodoReturn updateHSVState();
    TodoReturn updateIsOriented();
    TodoReturn updateMainColor();
    TodoReturn updateMainColorOnly();
    TodoReturn updateMainOpacity();
    void updateObjectEditorColor();
    TodoReturn updateSecondaryColor();
    TodoReturn updateSecondaryColorOnly();
    TodoReturn updateSecondaryOpacity();
    TodoReturn updateStartPos();
    TodoReturn updateUnmodifiedPositions();
    TodoReturn usesFreezeAnimation();
    TodoReturn usesSpecialAnimation();
    virtual void update(float p0);
    virtual void setScaleX(float p0);
    virtual void setScaleY(float p0);
    virtual void setScale(float p0);
    virtual void setPosition(cocos2d::CCPoint const& p0);
    virtual void setVisible(bool p0);
    virtual void setRotation(float p0);
    virtual void setRotationX(float p0);
    virtual void setRotationY(float p0);
    virtual void setOpacity(unsigned char p0);
    virtual bool initWithTexture(cocos2d::CCTexture2D* p0);
    virtual void setChildColor(cocos2d::ccColor3B const& p0);
    virtual void setFlipX(bool p0);
    virtual void setFlipY(bool p0);
    virtual void firstSetup();
    virtual void customSetup();
    virtual void setupCustomSprites(std::string p0);
    virtual TodoReturn addMainSpriteToParent(bool p0);
    virtual void resetObject();
    virtual void triggerObject(GJBaseGameLayer* p0, int p1, std::vector<int> const* p2);
    virtual void activateObject();
    virtual void deactivateObject(bool p0);
    virtual TodoReturn transferObjectRect(cocos2d::CCRect& p0);
    virtual cocos2d::CCRect const& getObjectRect();
    virtual cocos2d::CCRect getObjectRect(float p0, float p1);
    virtual cocos2d::CCRect getObjectRect2(float p0, float p1);
    virtual cocos2d::CCRect getObjectTextureRect();
    virtual cocos2d::CCPoint getRealPosition();
    virtual void setStartPos(cocos2d::CCPoint p0);
    virtual TodoReturn updateStartValues();
    virtual void customObjectSetup(std::vector<std::string>& p0, std::vector<void*>& p1);
    virtual std::string getSaveString(GJBaseGameLayer* p0);
    virtual TodoReturn claimParticle();
    virtual TodoReturn unclaimParticle();
    virtual bool particleWasActivated();
    virtual bool isFlipX();
    virtual bool isFlipY();
    virtual void setRScaleX(float p0);
    virtual void setRScaleY(float p0);
    virtual void setRScale(float p0);
    virtual float getRScaleX();
    virtual float getRScaleY();
    virtual void setRRotation(float p0);
    virtual void triggerActivated(float p0);
    virtual void setObjectColor(cocos2d::ccColor3B const& p0);
    virtual void setGlowColor(cocos2d::ccColor3B const& p0);
    virtual void restoreObject();
    virtual TodoReturn animationTriggered();
    virtual void selectObject(cocos2d::ccColor3B p0);
    virtual bool activatedByPlayer(PlayerObject* p0);
    virtual bool hasBeenActivatedByPlayer(PlayerObject* p0);
    virtual bool hasBeenActivated();
    virtual OBB2D* getOrientedBox();
    virtual void updateOrientedBox();
    virtual double getObjectRotation();
    int getObjectZLayer();
    virtual TodoReturn updateMainColor(cocos2d::ccColor3B const &p0);
    virtual TodoReturn updateSecondaryColor(cocos2d::ccColor3B const& p0);
    virtual int addToGroup(int p0);
    virtual void removeFromGroup(int p0);
    virtual TodoReturn saveActiveColors();
    virtual TodoReturn spawnXPosition();
    virtual bool canAllowMultiActivate();
    virtual TodoReturn blendModeChanged();
    virtual TodoReturn updateParticleColor(cocos2d::ccColor3B const& p0);
    virtual TodoReturn updateParticleOpacity(unsigned char p0);
    virtual TodoReturn updateMainParticleOpacity(unsigned char p0);
    virtual TodoReturn updateSecondaryParticleOpacity(unsigned char p0);
    virtual bool canReverse();
    virtual bool isSpecialSpawnObject();
    virtual bool canBeOrdered();
    virtual int getObjectLabel();
    virtual void setObjectLabel(cocos2d::CCLabelBMFont* p0);
    virtual TodoReturn shouldDrawEditorHitbox();
    virtual bool getHasSyncedAnimation();
    virtual bool getHasRotateAction();
    virtual bool canMultiActivate(bool p0);
    virtual TodoReturn updateTextKerning(int p0);
    virtual TodoReturn getTextKerning();
    virtual void setObjectRectDirty(bool p0);
    virtual void setOrientedRectDirty(bool p0);
    virtual void setType(GameObjectType p0);


    int m_innerSectionIndex;
    int m_outerSectionIndex;
    int m_middleSectionIndex;
    bool m_hasExtendedCollision;
    cocos2d::ccColor3B m_color;
    bool m_usesBlackOpacity;
    bool m_useObjectGlowColor;
    // undefined field13_0x21e;
    // undefined field14_0x21f;
    float m_blackOpacity;
    bool m_maybeIsBlending;
    bool m_isEditor;
    bool m_groupDisabled;
    bool field19_0x227;
    bool m_notLinked;
    bool m_userCoinUpdated;
    // undefined field22_0x22a;
    // undefined field23_0x22b;
    int m_colorMode;
    struct GameObject *m_previousObjectState;
    bool m_baseColorUsesHSV;
    bool m_detailColorUsesHSV;
    // undefined field28_0x236;
    // undefined field29_0x237;
    float m_currentPositionX;
    float m_currentPositionY;
    float m_UnkownRotation;
    int field33_0x244;
    float m_defaultRoation;
    int field35_0x24c;
    float m_scaleXInc;
    float m_scaleYInc;
    float m_realPositionX;
    float m_realPositionY;
    bool m_shouldLockX;
    bool m_isFlipX;
    bool m_isFlipY;
    // undefined field43_0x263;
    cocos2d::CCPoint m_obBoxOffset;
    bool m_isOriented;
    // undefined field46_0x26d;
    // undefined field47_0x26e;
    // undefined field48_0x26f;
    cocos2d::CCPoint m_obBoxOffset2;
    OBB2D *m_OBB2D;
    bool m_oriented;
    // undefined field52_0x27d;
    // undefined field53_0x27e;
    // undefined field54_0x27f;
    cocos2d::CCSprite *m_glow;
    cocos2d::CCSprite *m_glowSprite;
    float m_spriteSizeWidth;
    float m_spriteSizeHeight;
    bool m_hasDetailFrame;
    bool m_maybeActivated;
    bool m_invisible;
    // undefined field62_0x293;
    struct CCParticleSystem *m_particles;
    std::string m_particleKey;
    bool m_isParticle;
    bool m_updateParticleColor;
    bool m_isRingEffect;
    // undefined field68_0x29f;
    cocos2d::CCPoint m_obPortalPosition;
    bool m_particleDefaultScale;
    // undefined field71_0x2a9;
    // undefined field72_0x2aa;
    // undefined field73_0x2ab;
    cocos2d::CCRect m_objectTextureRect;
    bool m_textureRectDirty;
    bool m_objectPosXDirty;
    bool m_unmodifiedPositionsDirty;
    // undefined field78_0x2bf;
    float m_objectTextureRectHeight;
    cocos2d::CCRect m_transferedObjectRect;
    bool m_objectRectDirty;
    bool m_orientedRectDirty;
    bool m_positionUpdated;
    bool m_isBlendable;
    bool m_isObjectRect2Dirty;
    bool m_isOrientedRectDirty;
    bool m_hasBeenActivatedP1;
    bool m_hasBeenActivatedP2;
    int m_linkedGroup;
    int field90_0x2e0;
    short m_mainColorMode;
    short m_mainChildColorMode;
    bool m_shouldBlendBaseColor;
    bool m_shouldBlendDetailColor;
    bool m_hasChildren;
    bool m_isAnimatedObject;
    cocos2d::CCSprite *m_colorSprite;
    // undefined field98_0x2f0;
    // undefined field99_0x2f1;
    // undefined field100_0x2f2;
    // undefined field101_0x2f3;
    float m_objectRadius;
    bool m_objectRectCanRotate;
    // undefined field104_0x2f9;
    // undefined field105_0x2fa;
    // undefined field106_0x2fb;
    float m_OBB2DWidth;
    float m_OBB2DHeight;
    int m_unqiueID;
    int m_type;
    int m_previousType;
    int m_objectType;
    float m_unmodifiedPositionX;
    float m_unmodifiedPositionY;
    // undefined4 field115_0x31c;
    double m_lastPositionX;
    double m_lastPositionY;
    cocos2d::CCPoint m_startPosition;
    bool m_unk;
    bool m_hasNoAudioScale;
    bool m_disabled;
    // undefined field122_0x33b;
    float m_defaultRotationX;
    float m_defaultRotationY;
    float m_defaultScaleX;
    float m_defaultScaleY;
    float m_UnknownScaleX;
    float m_UnknownScaleY;
    bool m_defaultFlipX;
    bool m_defaultFlipY;
    bool m_shouldHide;
    bool m_isNotEditor;
    int m_unused1;
    // undefined field134_0x35c;
    // undefined field135_0x35d;
    bool m_unkBool;
    // undefined field137_0x35f;
    short field138_0x360;
    short field139_0x362;
    short m_enterChannel;
    short m_objectMaterial;
    // undefined field142_0x368;
    // undefined field143_0x369;
    short m_parentMode;
    bool m_disableGlow;
    // undefined field146_0x36d;
    // undefined field147_0x36e;
    // undefined field148_0x36f;
    int m_colorIdx;
    int m_objectID;
    bool m_dontTransfrom;
    bool m_defaultDontFade;
    bool m_ignoreEnter;
    bool m_ignoreFade;
    bool m_dontFadeTinted;
    bool m_isTintObject;
    bool m_isDetailOnly;
    // undefined field158_0x37f;
    short m_customColorType;
    bool m_isDontEnter;
    bool m_isDontFade;
    bool m_hideEffects;
    bool m_hasNoParticles;
    // undefined field164_0x386;
    // undefined field165_0x387;
    int m_defaultZOrder;
    bool m_isPortal;
    bool m_isShowing;
    bool m_isAudioScale;
    // undefined field170_0x38f;
    float m_minAudioScale;
    float m_maxAudioScale;
    bool m_noRotation;
    // undefined field174_0x399;
    // undefined field175_0x39a;
    // undefined field176_0x39b;
    int m_property53;
    bool m_doesntFade;
    bool m_useGlowBGColor;
    bool m_useGlowColor;
    bool m_is1704;
    float m_glowOpacityMultiplier;
    bool m_upSlope;
    // undefined field184_0x3a9;
    // undefined field185_0x3aa;
    // undefined field186_0x3ab;
    int m_slopeType;
    bool m_damaging;
    // undefined field189_0x3b1;
    // undefined field190_0x3b2;
    // undefined field191_0x3b3;
    float m_maybeColorOpacity;
    struct GJSpriteColor *m_baseColor;
    struct GJSpriteColor *m_detailColor;
    bool m_isBlendingBatchNode;
    // undefined field196_0x3c1;
    // undefined field197_0x3c2;
    // undefined field198_0x3c3;
    int m_defaultZLayer;
    int m_zLayer;
    int m_customZLayer;
    int m_zOrder;
    bool field203_0x3d4;
    bool m_selected;
    // undefined field205_0x3d6;
    // undefined field206_0x3d7;
    void* m_textblock;
    cocos2d::CCPoint field211_0x3dc;
    bool m_zLayerWasSet;
    bool field213_0x3e5;
    bool m_toggleGroupParent;
    bool m_toggleAreaParent;
    float m_customScaleX;
    float m_customScaleY;
    std::array<short, 10>*m_groupContainer;
    short m_groupCount;
    bool m_hasGroupParentsString;
    std::array<short, 10>*m_colorArray;
    short m_totalColors;
    // undefined field226_0x3fe;
    // undefined field227_0x3ff;
    std::array<short, 10>* m_opacityMod;
    // undefined field229_0x402;
    // undefined field230_0x403;
    short m_opacityGroupSize;
    short m_editorLayer;
    short m_editorLayer2;
    // undefined field234_0x40a;
    // undefined field235_0x40b;
    int m_numOfGroups;
    bool m_updateCustomContentSize;
    bool m_hasContentSize;
    bool m_isNoTouch;
    // undefined field240_0x413;
    cocos2d::CCSize m_size;
    cocos2d::CCPoint m_position;
    int field243_0x424;
    int field244_0x428;
    int field245_0x42c;
    bool field246_0x430;
    cocos2d::ccColor3B m_color2;
    int m_classID;
    bool m_isTrigger;
    bool field250_0x439;
    // undefined field251_0x43a;
    bool m_ignoreEditorDuration;
    bool m_isStoppableTrigger;
    bool m_isEditorSpawnableTrigger;
    bool m_dontCountTowardsLimit;
    bool m_isHighDetail;
    struct CCNode *m_colorSprite1;
    struct CCNode *m_colorSprite2;
    struct GJEffectManager *m_effectManager;
    bool m_unkEffectObject;
    bool m_isNotDamaging;
    bool m_isStaticGroup;
    // undefined1 m_unkRotation;
    bool m_isPixelScaleObject;
    bool m_isPassable;
    bool m_alwaysHide;
    bool m_isNonStickX;
    bool m_isNonStickY;
    bool m_iceBlock;
    bool m_isGripSlope;
    bool m_applyScaleStick;
    bool m_isExtraSticky;
    bool m_dontBoost;
    bool m_dontBoostX;
    bool m_is749;
    bool field276_0x45c;
    // undefined field277_0x45d;
    // undefined field278_0x45e;
    // undefined field279_0x45f;
    float field280_0x460;
    float m_scaleModX;
    float m_scaleModY;
    int m_property155;
    int m_property156;
    unsigned char m_opacity;
    // undefined field286_0x475;
    // undefined field287_0x476;
    // undefined field288_0x477;
    int field289_0x478;
    // undefined4 field290_0x47c;
    // undefined4 field291_0x480;
    // undefined field292_0x484;
    bool m_isUIObject;
    bool field294_0x486;
    
};

#endif // GAMEOBJECT_H
